diff --git a/src/vm-state-inl.h b/src/vm-state-inl.h
index d22e1abd69aeaa455836d4530214ca136cb5b63f..5c093e1885f45e8f56f2b20b3d15e5c42520de49 100644
--- a/src/vm-state-inl.h
+++ b/src/vm-state-inl.h
@@ -10,9 +10,51 @@
 #include "src/simulator.h"
 #include "src/tracing/trace-event.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "src/frames-inl.h"
+#endif
+
 namespace v8 {
 namespace internal {
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+inline int GetExecutingScriptId(Isolate* isolate) {
+  StackTraceFrameIterator it(isolate);
+  while (!it.done()) {
+    if (!it.is_javascript() && !it.is_wasm()) {
+      it.Advance();
+      continue;
+    }
+
+    JavaScriptFrame* frame = it.javascript_frame();
+    Handle<JSFunction> function(frame->function(), isolate);
+    if (function->context()->IsEvalContext()) {
+      it.Advance();
+      continue;
+    }
+
+    Object maybe_script = function->shared()->script();
+    if (!maybe_script->IsScript()) {
+      it.Advance();
+      continue;
+    }
+
+    Script script = Script::cast(maybe_script);
+    if (script.has_eval_from_shared()) {
+      it.Advance();
+      continue;
+    }
+
+    if (script->id() > 0) {
+      return script->id();
+    }
+  }
+
+  return 0;
+}
+#endif
+
 //
 // VMState class implementation.  A simple stack of VM states held by the
 // logger and partially threaded through the call stack.  States are pushed by
@@ -68,12 +110,44 @@ ExternalCallbackScope::ExternalCallbackScope(Isolate* isolate, Address callback)
   isolate_->set_external_callback_scope(this);
   TRACE_EVENT_BEGIN0(TRACE_DISABLED_BY_DEFAULT("v8.runtime"),
                      "V8.ExternalCallback");
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    const ScriptStartFunc start_func = isolate_->GetRegisterScriptStartFunc();
+    if (start_func == nullptr) {
+      return;
+    }
+
+    const int script_id = GetExecutingScriptId(isolate_);
+    if (script_id == 0) {
+      return;
+    }
+
+    v8::Isolate* isolate = reinterpret_cast<v8::Isolate*>(isolate_);
+    start_func(*isolate, script_id);
+  }
+#endif
 }
 
 ExternalCallbackScope::~ExternalCallbackScope() {
   isolate_->set_external_callback_scope(previous_scope_);
   TRACE_EVENT_END0(TRACE_DISABLED_BY_DEFAULT("v8.runtime"),
                    "V8.ExternalCallback");
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    const ScriptStartFunc end_func = isolate_->GetRegisterScriptEndFunc();
+    if (end_func == nullptr) {
+      return;
+    }
+
+    const int script_id = GetExecutingScriptId(isolate_);
+    if (script_id == 0) {
+      return;
+    }
+
+    v8::Isolate* isolate = reinterpret_cast<v8::Isolate*>(isolate_);
+    end_func(*isolate, script_id);
+  }
+#endif
 }
 
 Address ExternalCallbackScope::scope_address() {
